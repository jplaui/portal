// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package MerkleCombined

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MerkleCombinedMetaData contains all meta data concerning the MerkleCombined contract.
var MerkleCombinedMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"ProofVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"VerificationFailed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"public_inputs\",\"type\":\"uint256[]\"}],\"name\":\"Verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"uint256ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b506132ab8061001d5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c80637e4f7a8a1461004e5780637ecebe001461007e5780639099df1b146100ae578063ce7e51e3146100b8575b5f80fd5b61006860048036038101906100639190612ac0565b6100e8565b6040516100759190612b58565b60405180910390f35b61009860048036038101906100939190612bcb565b612797565b6040516100a59190612c80565b60405180910390f35b6100b6612831565b005b6100d260048036038101906100cd9190612cd3565b6128a9565b6040516100df9190612c80565b60405180910390f35b5f805f90505f805f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805461013590612d2b565b80601f016020809104026020016040519081016040528092919081815260200182805461016190612d2b565b80156101ac5780601f10610183576101008083540402835291602001916101ac565b820191905f5260205f20905b81548152906001019060200180831161018f57829003601f168201915b505050505090505f8190505f8151036101fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f190612da5565b60405180910390fd5b7f3000000000000000000000000000000000000000000000000000000000000000816001835161022a9190612df0565b8151811061023b5761023a612e23565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146102a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029f90612da5565b60405180910390fd5b60405161022081016102b987610659565b6102c3888861066d565b6102cc896106c6565b6102d58a6106e2565b5f6102e189898d6108b8565b90506102ec81610ba8565b90506102f8818c610c0f565b9050610304818c610c8a565b60608301517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010361035b85614000856125c8565b08806101a086015261036e848b8d610cf8565b8061018087015261037d611059565b6103868e6120f9565b61038f8e612083565b6103988e611c7e565b6103a18e6117db565b6103aa8e61157e565b6103b38e6111ad565b6101e08601519850612632565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f77726f6e67206e756d626572206f66207075626c696320696e707574730000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6572726f72206563206f7065726174696f6e00000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e707574732061726520626967676572207468616e207200000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f77726f6e672070726f6f662073697a65000000000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6f70656e696e677320626967676572207468616e2072000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6572726f722076657269667900000000000000000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6572726f722072616e646f6d2067656e206b7a670000000000000000000000006044820152606481fd5b6005811461066a576106696103c0565b5b50565b60015f5b828110156106b2577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184351082169150602084019350600181019050610671565b50806106c1576106c061047e565b5b505050565b60605f02610340018082146106de576106dd6104dd565b5b5050565b60016102a082017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610280830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610180830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001813510821691506101a0830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001813510821691506101c0830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001813510821691506101e0830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610200830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610260830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610340830190505f5b5f8110156108a4577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182351083169250602082019150600181019050610863565b50816108b3576108b261053c565b5b505050565b5f60405161022081016467616d6d6181527f1452ae233bf72802c6ae92f82f867e8bdfbaa12ba9c03a1786745cc935522bea60208201527f136f315c3f238ae41623a84f24c2840b9a86a72d790b7b97e1cf6ce15755ab0a60408201527f04282390cb102444882aa0d7fc1d143f1833bec3b4bb4594ee4f61c39800cc9760608201527f18512b4027392435fb6313775cd208bddb092f80095805de1311b038654c4a5360808201527f080851be323885d614a75e8e350cb502a104c0cf0a25d31645cda56749b90d0e60a08201527f09fa326daf991b78d99776c0d1ad8862cf4cdc4052bf87bd02dd4b9186f1a14260c08201527f0bea9ee7612e7b000cdccfedb4f948f9690bda8c2182d3e596bc6d45c1a69d3460e08201527f21eafc4a7b994ee7970d3b6dca85e581f8fdcff1a247fd864e5b3ed77cf6c3dd6101008201527f2374ea57bfe42521b1dc68c373a54146e0c3976a546976d478f8a9056a3465b86101208201527f10cb7fb06c33b29acc449cdcbadb39f308c1dcf1443947cb0c584a4e72906e546101408201527f08cffd3147c5c5be3b2aa4206182da38f4947f09835f6fba145bf6755c5740236101608201527f05d63186aae3a9ad660c0a15d8c93c75f9a654ed576344563b8e89ecc70cf23c6101808201527f2e89303572d2b222e4f19decd2e6ddd1332d9f27eccb2bde5176d82b496045db6101a08201527f2c43cc3526d5c2328ba5d96e944703229150d63f07d88a837c54e8d29c7091786101c08201527f2b5aa2cc2773f79a6cd6738400cba1e26fcff00b254d2557dd12e68a1ae7867c6101e08201527f19e709c4db358e07f08e7bb99383d67b23fb3d6172cd84fd90d7c481b546413361020082015261022081016020860280888337808201915060c0808784378083019250816102c50160208582601b880160025afa80610b6e57610b6d61059b565b5b855197507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000188066040880152505050505050509392505050565b5f60405161022060405101636265746181528360208201526020816024601c840160025afa80610bdb57610bda61059b565b5b815193507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184066020840152505050919050565b5f60405161022060405101606564616c70686182526020820186815260208101905060406102208701823760208383601b860160025afa80610c5457610c5361059b565b5b835195507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000186065f860152505050505092915050565b60405161022060405101637a657461815283602082015260c0808401604083013760208160e4601c840160025afa80610cc657610cc561059b565b5b81517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181066060850152505050505050565b5f60405160608101516101a082015186610d1481888486610d91565b5f805b88811015610d84577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001883584510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018288089650602083019250602088019750600181019050610d17565b5050505050509392505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30638ce1a7661b6337a964756aa75257c6bf4778d89789ab819ce60c19b0400183096001855f5b86811015610e81577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103860882527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2d965651cdd9e4811f4e51b80ddca8a8b4a93ee17420aae6adaa01c2617c6e8584099250602082019150600181019050610dda565b50610e8d818789610f49565b869050600191505f5b86811015610f3f577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001868551090982526020820191507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2d965651cdd9e4811f4e51b80ddca8a8b4a93ee17420aae6adaa01c2617c6e8584099250600181019050610e96565b5050505050505050565b600183525f805b83811015610f9e5781850151828401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001818309905060208401935080848801525050600181019050610f50565b5060208103820191508084019350610fde6020850160027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010386516125c8565b5f5b848110156110515760208603955083517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001875184098086527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182850993506020860395505050600181019050610fe0565b505050505050565b604051610220604051016101a08201517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001036060850151086110e28360027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103836125c8565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30638ce1a7661b6337a964756aa75257c6bf4778d89789ab819ce60c19b04001820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820991505f8401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181840992508260808601525050505050565b6040516102208101610140820151815261016082015160208201526102c083013560408201526102e08301356060820152610220830135608082015261024083013560a082015261030083013560c082015261032083013560e082015260608201516101008201526101c08201516101208201526020816101408360025afa8061123a576112396105fa565b5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018251069050816040810192506102c085013581526102e0850135602082015261128a8383610300880184612520565b610140840161129f8484610220890184612520565b61012085016112b384610260890183612576565b8460408101955060018152600260208201528151604082015260408160608360075afa806112e4576112e361059b565b5b6020820180517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703815261131a888487886123d8565b876040890198506113358960608c01516102c08e0184612493565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2d965651cdd9e4811f4e51b80ddca8a8b4a93ee17420aae6adaa01c2617c6e8560608c0151097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001818a0998506113b38a8a6103008f0185612520565b6113bf8a83898a6123d8565b6020880180517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703815287518b52602088015160208c01527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c260408c01527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed60608c01527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60808c01527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60a08c0152885160c08c0152602089015160e08c01527f21738d3aa5adca8417ebc7ed4fdd8e647f49d795bf07cac6b96135fc0ee863a06101008c01527f1b7859a00c34828a76e6dc821762352a31f1651088bee3a24d90015bcb13e37b6101208c01527f2762d105a6756647a63520da6656fadd0858f8eed3e85abc2f8cbbbb58c9b63f6101408c01527e6729af1c1a28c6b19d6b636508b74f64a7a33e038cea886637a5c93e77c0e96101608c01526115448b611553565b50505050505050505050505050565b60405160205f6101808460085afa5f516101e083015180838316169150816101e08501525050505050565b6040516102206040510160208101604082016101c084015180610140860160a087015161014088015260c08701516101608801526102808801356101208801526115cd868360e08a01846124ca565b6115e0826102a08a016101208a01612576565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838309915061161886835f8b016101408b01612520565b61162b826101808a016101208a01612576565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018383099150611660868360408b0184612520565b611673826101a08a016101208a01612576565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183830991506116a8868360808b0184612520565b6116bb826101c08a016101208a01612576565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183830991507f1452ae233bf72802c6ae92f82f867e8bdfbaa12ba9c03a1786745cc935522bea86527f136f315c3f238ae41623a84f24c2840b9a86a72d790b7b97e1cf6ce15755ab0a8552611733848388846124ca565b611746826101e08a016101208a01612576565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183830991507f04282390cb102444882aa0d7fc1d143f1833bec3b4bb4594ee4f61c39800cc9786527f18512b4027392435fb6313775cd208bddb092f80095805de1311b038654c4a5385526117be848388846124ca565b6117d1826102008a016101208a01612576565b5050505050505050565b604051610220604051016467616d6d6181526060820151602082015260a0820151604082015260c0820151606082015260e0820151608082015261010082015160a082015260c05f840160c08301377f1452ae233bf72802c6ae92f82f867e8bdfbaa12ba9c03a1786745cc935522bea6101808201527f136f315c3f238ae41623a84f24c2840b9a86a72d790b7b97e1cf6ce15755ab0a6101a08201527f04282390cb102444882aa0d7fc1d143f1833bec3b4bb4594ee4f61c39800cc976101c08201527f18512b4027392435fb6313775cd208bddb092f80095805de1311b038654c4a536101e0820152610200610280840135818301526102a084013560208201830152610180840135604082018301526101a0840135606082018301526101c0840135608082018301526101e084013560a0820183015261020084013560c0820183015260e0810182016102608501358152601b60035f0260170160208102600501905060206101c087018284880160025afa8061195e5761195d61059b565b5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c0880151066101c08801525050505050505050565b604051610220604051017f0bea9ee7612e7b000cdccfedb4f948f9690bda8c2182d3e596bc6d45c1a69d3481527f21eafc4a7b994ee7970d3b6dca85e581f8fdcff1a247fd864e5b3ed77cf6c3dd6020820152611a00604082016101808501358360e0860161245c565b7f2374ea57bfe42521b1dc68c373a54146e0c3976a546976d478f8a9056a3465b881527f10cb7fb06c33b29acc449cdcbadb39f308c1dcf1443947cb0c584a4e72906e546020820152611a60604082016101a08501358360e086016124ca565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a0840135610180850135097f08cffd3147c5c5be3b2aa4206182da38f4947f09835f6fba145bf6755c57402382527f05d63186aae3a9ad660c0a15d8c93c75f9a654ed576344563b8e89ecc70cf23c6020830152611ae960408301828460e087016124ca565b7f2e89303572d2b222e4f19decd2e6ddd1332d9f27eccb2bde5176d82b496045db82527f2c43cc3526d5c2328ba5d96e944703229150d63f07d88a837c54e8d29c7091786020830152611b49604083016101c08601358460e087016124ca565b7f2b5aa2cc2773f79a6cd6738400cba1e26fcff00b254d2557dd12e68a1ae7867c82527f19e709c4db358e07f08e7bb99383d67b23fb3d6172cd84fd90d7c481b54641336020830152611ba7604083018360e0860160e087016123d8565b610340840161034085015f5b5f811015611bf3578135855260208201356020860152611bdc6040860184358760e08a016124ca565b602083019250604082019150600181019050611bb3565b507f080851be323885d614a75e8e350cb502a104c0cf0a25d31645cda56749b90d0e84527f09fa326daf991b78d99776c0d1ad8862cf4cdc4052bf87bd02dd4b9186f1a1426020850152611c4f60408501888660e089016124ca565b61022086013584526102408601356020850152611c7460408501898660e089016124ca565b5050505050505050565b6040516020810151604082015160608301515f8401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184610260880135097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101e088013586097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610180890135820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161020089013587097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08a0135820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000186820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018284097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600580097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001878a097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101808d0135820895507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189870895507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016005820994507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08d0135860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820993507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c08d0135850893507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189850893507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018587097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018582099050807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010390507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000188820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160808d01518208905061207481858f611996565b50505050505050505050505050565b604051600261400001610220604051016120a2818360608601516125c8565b6120b58282610140880160a08801612493565b6120cb82610100870160a0870160a0880161241a565b6120dd828260a0870160a0880161245c565b6120f28260c0870160a0870160a0880161241a565b5050505050565b604051610220604051017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208301516101e08501350981527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604083015182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101808401358251088152602081017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208401516102008601350981527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604084015182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08501358251088152604082017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160408501516101c08701350881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001825184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001815184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000015f85015184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102608601358451098352606083017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101808601516102a08801350881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001845182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160808601517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010382510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a086015161028088013509835282518151146101e0860152505050505050565b6040518251855260208301516020860152835160408601526020840151606086015260408260808760065afa806124125761241161041f565b5b505050505050565b6040518251855260208301516020860152833560408601526020840135606086015260408260808760065afa806124545761245361041f565b5b505050505050565b604051825185526020830151602086015283604086015260408260608760075afa8061248b5761248a61041f565b5b505050505050565b604051823585526020830135602086015283604086015260408260608760075afa806124c2576124c161041f565b5b505050505050565b604051825185526020830151602086015283604086015260408560608760075afa825160408701526020830151606087015260408360808860065afa81169050806125185761251761041f565b5b505050505050565b604051823585526020830135602086015283604086015260408560608760075afa825160408701526020830151606087015260408360808860065afa811690508061256e5761256d61041f565b5b505050505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838335097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181835108825250505050565b5f60208452602080850152602060408501528160608501528260808501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a085015260208460c08660055afa5f81036126265761262561059b565b5b84519150509392505050565b5050505050508261268b573373ffffffffffffffffffffffffffffffffffffffff167f4c87e2b695a6641e4d63f88e9d449494080344c0c2700faaf708e320b2c2f8bf60405160405180910390a25f935050505061278f565b7f310000000000000000000000000000000000000000000000000000000000000081600183516126bb9190612df0565b815181106126cc576126cb612e23565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350805f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f209081612743919061301a565b503373ffffffffffffffffffffffffffffffffffffffff167f9cbb2c694eed9687ad9654ae462269807cc8b44f6dbd076f296bd916f1f3d0cd60405160405180910390a2600193505050505b949350505050565b5f602052805f5260405f205f9150905080546127b290612d2b565b80601f01602080910402602001604051908101604052809291908181526020018280546127de90612d2b565b80156128295780601f1061280057610100808354040283529160200191612829565b820191905f5260205f20905b81548152906001019060200180831161280c57829003601f168201915b505050505081565b5f61283b446128a9565b60405160200161284b9190613149565b6040516020818303038152906040529050805f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090816128a5919061301a565b5050565b60605f82036128ef576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506129fd565b5f8290505f5b5f821461291e5780806129079061316e565b915050600a8261291791906131e2565b91506128f5565b5f8167ffffffffffffffff81111561293957612938612e50565b5b6040519080825280601f01601f19166020018201604052801561296b5781602001600182028036833780820191505090505b5090505b5f85146129f6576001826129839190612df0565b9150600a856129929190613212565b603061299e9190613242565b60f81b8183815181106129b4576129b3612e23565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600a856129ef91906131e2565b945061296f565b8093505050505b919050565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112612a2b57612a2a612a0a565b5b8235905067ffffffffffffffff811115612a4857612a47612a0e565b5b602083019150836001820283011115612a6457612a63612a12565b5b9250929050565b5f8083601f840112612a8057612a7f612a0a565b5b8235905067ffffffffffffffff811115612a9d57612a9c612a0e565b5b602083019150836020820283011115612ab957612ab8612a12565b5b9250929050565b5f805f8060408587031215612ad857612ad7612a02565b5b5f85013567ffffffffffffffff811115612af557612af4612a06565b5b612b0187828801612a16565b9450945050602085013567ffffffffffffffff811115612b2457612b23612a06565b5b612b3087828801612a6b565b925092505092959194509250565b5f8115159050919050565b612b5281612b3e565b82525050565b5f602082019050612b6b5f830184612b49565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612b9a82612b71565b9050919050565b612baa81612b90565b8114612bb4575f80fd5b50565b5f81359050612bc581612ba1565b92915050565b5f60208284031215612be057612bdf612a02565b5b5f612bed84828501612bb7565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015612c2d578082015181840152602081019050612c12565b5f8484015250505050565b5f601f19601f8301169050919050565b5f612c5282612bf6565b612c5c8185612c00565b9350612c6c818560208601612c10565b612c7581612c38565b840191505092915050565b5f6020820190508181035f830152612c988184612c48565b905092915050565b5f819050919050565b612cb281612ca0565b8114612cbc575f80fd5b50565b5f81359050612ccd81612ca9565b92915050565b5f60208284031215612ce857612ce7612a02565b5b5f612cf584828501612cbf565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612d4257607f821691505b602082108103612d5557612d54612cfe565b5b50919050565b7f76657269666965722d696e76616c69642d6e6f6e6365000000000000000000005f82015250565b5f612d8f601683612c00565b9150612d9a82612d5b565b602082019050919050565b5f6020820190508181035f830152612dbc81612d83565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612dfa82612ca0565b9150612e0583612ca0565b9250828203905081811115612e1d57612e1c612dc3565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302612ed97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612e9e565b612ee38683612e9e565b95508019841693508086168417925050509392505050565b5f819050919050565b5f612f1e612f19612f1484612ca0565b612efb565b612ca0565b9050919050565b5f819050919050565b612f3783612f04565b612f4b612f4382612f25565b848454612eaa565b825550505050565b5f90565b612f5f612f53565b612f6a818484612f2e565b505050565b5b81811015612f8d57612f825f82612f57565b600181019050612f70565b5050565b601f821115612fd257612fa381612e7d565b612fac84612e8f565b81016020851015612fbb578190505b612fcf612fc785612e8f565b830182612f6f565b50505b505050565b5f82821c905092915050565b5f612ff25f1984600802612fd7565b1980831691505092915050565b5f61300a8383612fe3565b9150826002028217905092915050565b61302382612bf6565b67ffffffffffffffff81111561303c5761303b612e50565b5b6130468254612d2b565b613051828285612f91565b5f60209050601f831160018114613082575f8415613070578287015190505b61307a8582612fff565b8655506130e1565b601f19841661309086612e7d565b5f5b828110156130b757848901518255600182019150602085019450602081019050613092565b868310156130d457848901516130d0601f891682612fe3565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f6130fd82612bf6565b61310781856130e9565b9350613117818560208601612c10565b80840191505092915050565b7f3000000000000000000000000000000000000000000000000000000000000000815250565b5f61315482846130f3565b915061315f82613123565b60018201915081905092915050565b5f61317882612ca0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131aa576131a9612dc3565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6131ec82612ca0565b91506131f783612ca0565b925082613207576132066131b5565b5b828204905092915050565b5f61321c82612ca0565b915061322783612ca0565b925082613237576132366131b5565b5b828206905092915050565b5f61324c82612ca0565b915061325783612ca0565b925082820190508082111561326f5761326e612dc3565b5b9291505056fea2646970667358221220679a37e50815ad06e23c087881f924dd6c423b75270cea278b40712690c08fe864736f6c63430008140033",
}

// MerkleCombinedABI is the input ABI used to generate the binding from.
// Deprecated: Use MerkleCombinedMetaData.ABI instead.
var MerkleCombinedABI = MerkleCombinedMetaData.ABI

// MerkleCombinedBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MerkleCombinedMetaData.Bin instead.
var MerkleCombinedBin = MerkleCombinedMetaData.Bin

// DeployMerkleCombined deploys a new Ethereum contract, binding an instance of MerkleCombined to it.
func DeployMerkleCombined(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MerkleCombined, error) {
	parsed, err := MerkleCombinedMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MerkleCombinedBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MerkleCombined{MerkleCombinedCaller: MerkleCombinedCaller{contract: contract}, MerkleCombinedTransactor: MerkleCombinedTransactor{contract: contract}, MerkleCombinedFilterer: MerkleCombinedFilterer{contract: contract}}, nil
}

// MerkleCombined is an auto generated Go binding around an Ethereum contract.
type MerkleCombined struct {
	MerkleCombinedCaller     // Read-only binding to the contract
	MerkleCombinedTransactor // Write-only binding to the contract
	MerkleCombinedFilterer   // Log filterer for contract events
}

// MerkleCombinedCaller is an auto generated read-only Go binding around an Ethereum contract.
type MerkleCombinedCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleCombinedTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MerkleCombinedTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleCombinedFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MerkleCombinedFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleCombinedSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MerkleCombinedSession struct {
	Contract     *MerkleCombined   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MerkleCombinedCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MerkleCombinedCallerSession struct {
	Contract *MerkleCombinedCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// MerkleCombinedTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MerkleCombinedTransactorSession struct {
	Contract     *MerkleCombinedTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// MerkleCombinedRaw is an auto generated low-level Go binding around an Ethereum contract.
type MerkleCombinedRaw struct {
	Contract *MerkleCombined // Generic contract binding to access the raw methods on
}

// MerkleCombinedCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MerkleCombinedCallerRaw struct {
	Contract *MerkleCombinedCaller // Generic read-only contract binding to access the raw methods on
}

// MerkleCombinedTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MerkleCombinedTransactorRaw struct {
	Contract *MerkleCombinedTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMerkleCombined creates a new instance of MerkleCombined, bound to a specific deployed contract.
func NewMerkleCombined(address common.Address, backend bind.ContractBackend) (*MerkleCombined, error) {
	contract, err := bindMerkleCombined(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MerkleCombined{MerkleCombinedCaller: MerkleCombinedCaller{contract: contract}, MerkleCombinedTransactor: MerkleCombinedTransactor{contract: contract}, MerkleCombinedFilterer: MerkleCombinedFilterer{contract: contract}}, nil
}

// NewMerkleCombinedCaller creates a new read-only instance of MerkleCombined, bound to a specific deployed contract.
func NewMerkleCombinedCaller(address common.Address, caller bind.ContractCaller) (*MerkleCombinedCaller, error) {
	contract, err := bindMerkleCombined(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleCombinedCaller{contract: contract}, nil
}

// NewMerkleCombinedTransactor creates a new write-only instance of MerkleCombined, bound to a specific deployed contract.
func NewMerkleCombinedTransactor(address common.Address, transactor bind.ContractTransactor) (*MerkleCombinedTransactor, error) {
	contract, err := bindMerkleCombined(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleCombinedTransactor{contract: contract}, nil
}

// NewMerkleCombinedFilterer creates a new log filterer instance of MerkleCombined, bound to a specific deployed contract.
func NewMerkleCombinedFilterer(address common.Address, filterer bind.ContractFilterer) (*MerkleCombinedFilterer, error) {
	contract, err := bindMerkleCombined(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MerkleCombinedFilterer{contract: contract}, nil
}

// bindMerkleCombined binds a generic wrapper to an already deployed contract.
func bindMerkleCombined(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MerkleCombinedABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleCombined *MerkleCombinedRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleCombined.Contract.MerkleCombinedCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleCombined *MerkleCombinedRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleCombined.Contract.MerkleCombinedTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleCombined *MerkleCombinedRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleCombined.Contract.MerkleCombinedTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleCombined *MerkleCombinedCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleCombined.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleCombined *MerkleCombinedTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleCombined.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleCombined *MerkleCombinedTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleCombined.Contract.contract.Transact(opts, method, params...)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(string)
func (_MerkleCombined *MerkleCombinedCaller) Nonces(opts *bind.CallOpts, arg0 common.Address) (string, error) {
	var out []interface{}
	err := _MerkleCombined.contract.Call(opts, &out, "nonces", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(string)
func (_MerkleCombined *MerkleCombinedSession) Nonces(arg0 common.Address) (string, error) {
	return _MerkleCombined.Contract.Nonces(&_MerkleCombined.CallOpts, arg0)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(string)
func (_MerkleCombined *MerkleCombinedCallerSession) Nonces(arg0 common.Address) (string, error) {
	return _MerkleCombined.Contract.Nonces(&_MerkleCombined.CallOpts, arg0)
}

// Uint256ToString is a free data retrieval call binding the contract method 0xce7e51e3.
//
// Solidity: function uint256ToString(uint256 value) pure returns(string)
func (_MerkleCombined *MerkleCombinedCaller) Uint256ToString(opts *bind.CallOpts, value *big.Int) (string, error) {
	var out []interface{}
	err := _MerkleCombined.contract.Call(opts, &out, "uint256ToString", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uint256ToString is a free data retrieval call binding the contract method 0xce7e51e3.
//
// Solidity: function uint256ToString(uint256 value) pure returns(string)
func (_MerkleCombined *MerkleCombinedSession) Uint256ToString(value *big.Int) (string, error) {
	return _MerkleCombined.Contract.Uint256ToString(&_MerkleCombined.CallOpts, value)
}

// Uint256ToString is a free data retrieval call binding the contract method 0xce7e51e3.
//
// Solidity: function uint256ToString(uint256 value) pure returns(string)
func (_MerkleCombined *MerkleCombinedCallerSession) Uint256ToString(value *big.Int) (string, error) {
	return _MerkleCombined.Contract.Uint256ToString(&_MerkleCombined.CallOpts, value)
}

// Verify is a paid mutator transaction binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) returns(bool success)
func (_MerkleCombined *MerkleCombinedTransactor) Verify(opts *bind.TransactOpts, proof []byte, public_inputs []*big.Int) (*types.Transaction, error) {
	return _MerkleCombined.contract.Transact(opts, "Verify", proof, public_inputs)
}

// Verify is a paid mutator transaction binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) returns(bool success)
func (_MerkleCombined *MerkleCombinedSession) Verify(proof []byte, public_inputs []*big.Int) (*types.Transaction, error) {
	return _MerkleCombined.Contract.Verify(&_MerkleCombined.TransactOpts, proof, public_inputs)
}

// Verify is a paid mutator transaction binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) returns(bool success)
func (_MerkleCombined *MerkleCombinedTransactorSession) Verify(proof []byte, public_inputs []*big.Int) (*types.Transaction, error) {
	return _MerkleCombined.Contract.Verify(&_MerkleCombined.TransactOpts, proof, public_inputs)
}

// SetNonce is a paid mutator transaction binding the contract method 0x9099df1b.
//
// Solidity: function setNonce() returns()
func (_MerkleCombined *MerkleCombinedTransactor) SetNonce(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleCombined.contract.Transact(opts, "setNonce")
}

// SetNonce is a paid mutator transaction binding the contract method 0x9099df1b.
//
// Solidity: function setNonce() returns()
func (_MerkleCombined *MerkleCombinedSession) SetNonce() (*types.Transaction, error) {
	return _MerkleCombined.Contract.SetNonce(&_MerkleCombined.TransactOpts)
}

// SetNonce is a paid mutator transaction binding the contract method 0x9099df1b.
//
// Solidity: function setNonce() returns()
func (_MerkleCombined *MerkleCombinedTransactorSession) SetNonce() (*types.Transaction, error) {
	return _MerkleCombined.Contract.SetNonce(&_MerkleCombined.TransactOpts)
}

// MerkleCombinedProofVerifiedIterator is returned from FilterProofVerified and is used to iterate over the raw logs and unpacked data for ProofVerified events raised by the MerkleCombined contract.
type MerkleCombinedProofVerifiedIterator struct {
	Event *MerkleCombinedProofVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MerkleCombinedProofVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MerkleCombinedProofVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MerkleCombinedProofVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MerkleCombinedProofVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MerkleCombinedProofVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MerkleCombinedProofVerified represents a ProofVerified event raised by the MerkleCombined contract.
type MerkleCombinedProofVerified struct {
	Identity common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterProofVerified is a free log retrieval operation binding the contract event 0x9cbb2c694eed9687ad9654ae462269807cc8b44f6dbd076f296bd916f1f3d0cd.
//
// Solidity: event ProofVerified(address indexed identity)
func (_MerkleCombined *MerkleCombinedFilterer) FilterProofVerified(opts *bind.FilterOpts, identity []common.Address) (*MerkleCombinedProofVerifiedIterator, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _MerkleCombined.contract.FilterLogs(opts, "ProofVerified", identityRule)
	if err != nil {
		return nil, err
	}
	return &MerkleCombinedProofVerifiedIterator{contract: _MerkleCombined.contract, event: "ProofVerified", logs: logs, sub: sub}, nil
}

// WatchProofVerified is a free log subscription operation binding the contract event 0x9cbb2c694eed9687ad9654ae462269807cc8b44f6dbd076f296bd916f1f3d0cd.
//
// Solidity: event ProofVerified(address indexed identity)
func (_MerkleCombined *MerkleCombinedFilterer) WatchProofVerified(opts *bind.WatchOpts, sink chan<- *MerkleCombinedProofVerified, identity []common.Address) (event.Subscription, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _MerkleCombined.contract.WatchLogs(opts, "ProofVerified", identityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MerkleCombinedProofVerified)
				if err := _MerkleCombined.contract.UnpackLog(event, "ProofVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProofVerified is a log parse operation binding the contract event 0x9cbb2c694eed9687ad9654ae462269807cc8b44f6dbd076f296bd916f1f3d0cd.
//
// Solidity: event ProofVerified(address indexed identity)
func (_MerkleCombined *MerkleCombinedFilterer) ParseProofVerified(log types.Log) (*MerkleCombinedProofVerified, error) {
	event := new(MerkleCombinedProofVerified)
	if err := _MerkleCombined.contract.UnpackLog(event, "ProofVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MerkleCombinedVerificationFailedIterator is returned from FilterVerificationFailed and is used to iterate over the raw logs and unpacked data for VerificationFailed events raised by the MerkleCombined contract.
type MerkleCombinedVerificationFailedIterator struct {
	Event *MerkleCombinedVerificationFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MerkleCombinedVerificationFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MerkleCombinedVerificationFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MerkleCombinedVerificationFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MerkleCombinedVerificationFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MerkleCombinedVerificationFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MerkleCombinedVerificationFailed represents a VerificationFailed event raised by the MerkleCombined contract.
type MerkleCombinedVerificationFailed struct {
	Identity common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterVerificationFailed is a free log retrieval operation binding the contract event 0x4c87e2b695a6641e4d63f88e9d449494080344c0c2700faaf708e320b2c2f8bf.
//
// Solidity: event VerificationFailed(address indexed identity)
func (_MerkleCombined *MerkleCombinedFilterer) FilterVerificationFailed(opts *bind.FilterOpts, identity []common.Address) (*MerkleCombinedVerificationFailedIterator, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _MerkleCombined.contract.FilterLogs(opts, "VerificationFailed", identityRule)
	if err != nil {
		return nil, err
	}
	return &MerkleCombinedVerificationFailedIterator{contract: _MerkleCombined.contract, event: "VerificationFailed", logs: logs, sub: sub}, nil
}

// WatchVerificationFailed is a free log subscription operation binding the contract event 0x4c87e2b695a6641e4d63f88e9d449494080344c0c2700faaf708e320b2c2f8bf.
//
// Solidity: event VerificationFailed(address indexed identity)
func (_MerkleCombined *MerkleCombinedFilterer) WatchVerificationFailed(opts *bind.WatchOpts, sink chan<- *MerkleCombinedVerificationFailed, identity []common.Address) (event.Subscription, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _MerkleCombined.contract.WatchLogs(opts, "VerificationFailed", identityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MerkleCombinedVerificationFailed)
				if err := _MerkleCombined.contract.UnpackLog(event, "VerificationFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerificationFailed is a log parse operation binding the contract event 0x4c87e2b695a6641e4d63f88e9d449494080344c0c2700faaf708e320b2c2f8bf.
//
// Solidity: event VerificationFailed(address indexed identity)
func (_MerkleCombined *MerkleCombinedFilterer) ParseVerificationFailed(log types.Log) (*MerkleCombinedVerificationFailed, error) {
	event := new(MerkleCombinedVerificationFailed)
	if err := _MerkleCombined.contract.UnpackLog(event, "VerificationFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
